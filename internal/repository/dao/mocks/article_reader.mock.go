// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/dao/article_reader.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/dao/article_reader.go -package=daomocks -destination=./internal/repository/dao/mocks/article_reader.mock.go
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	reflect "reflect"
	dao "webook/internal/repository/dao"

	gomock "go.uber.org/mock/gomock"
)

// MockArticleReaderDAO is a mock of ArticleReaderDAO interface.
type MockArticleReaderDAO struct {
	ctrl     *gomock.Controller
	recorder *MockArticleReaderDAOMockRecorder
}

// MockArticleReaderDAOMockRecorder is the mock recorder for MockArticleReaderDAO.
type MockArticleReaderDAOMockRecorder struct {
	mock *MockArticleReaderDAO
}

// NewMockArticleReaderDAO creates a new mock instance.
func NewMockArticleReaderDAO(ctrl *gomock.Controller) *MockArticleReaderDAO {
	mock := &MockArticleReaderDAO{ctrl: ctrl}
	mock.recorder = &MockArticleReaderDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleReaderDAO) EXPECT() *MockArticleReaderDAOMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockArticleReaderDAO) Upsert(ctx context.Context, art dao.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockArticleReaderDAOMockRecorder) Upsert(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockArticleReaderDAO)(nil).Upsert), ctx, art)
}
